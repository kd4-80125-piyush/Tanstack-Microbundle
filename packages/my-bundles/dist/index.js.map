{"version":3,"file":"index.js","sources":["../src/Table.jsx"],"sourcesContent":["import React, { Fragment, useMemo, useState } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\n//import DisplayData from './DisplayData';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Table.css';\r\n//import Swal from 'sweetalert2';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Hardcoded data\r\nconst hardcodedData = [\r\n  { Id: 1, Name: 'John Doe', Age: 28, Country: 'USA' },\r\n  { Id: 2, Name: 'Jane Smith', Age: 34, Country: 'Canada' },\r\n  { Id: 3, Name: 'Alice Johnson', Age: 45, Country: 'UK' },\r\n  { Id: 4, Name: 'Bob Brown', Age: 23, Country: 'Australia' },\r\n];\r\n\r\nconst Table = () => {\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedData, setSelectedData] = useState([]);\r\n  const [data, setData] = useState(hardcodedData);\r\n  const [selectedFormat, setSelectedFormat] = useState('json');\r\n\r\n  const handleCheckboxChange = (row) => {\r\n    const rowId = row.original.Id;\r\n    setSelectedRows(prevSelected => {\r\n      const isSelected = prevSelected.includes(rowId);\r\n      const updatedSelected = isSelected\r\n        ? prevSelected.filter(id => id !== rowId)\r\n        : [...prevSelected, rowId];\r\n\r\n      const updatedData = data.filter(item => updatedSelected.includes(item.Id));\r\n      setSelectedData(updatedData);\r\n\r\n      return updatedSelected;\r\n    });\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedRows.length === data.length) {\r\n      setSelectedRows([]);\r\n      setSelectedData([]);\r\n    } else {\r\n      const allIds = data.map(row => row.Id);\r\n      setSelectedRows(allIds);\r\n      setSelectedData(data);\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: () => (\r\n          <button onClick={handleSelectAll} className=\"custom-btn2\">\r\n            <b>Select</b>\r\n          </button>\r\n        ),\r\n        accessor: 'select',\r\n        Cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedRows.includes(row.original.Id)}\r\n            onChange={() => handleCheckboxChange(row)}\r\n          />\r\n        ),\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: 'Identity',\r\n        accessor: 'Id',\r\n      },\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'Name',\r\n      },\r\n      {\r\n        Header: 'Age',\r\n        accessor: 'Age',\r\n      },\r\n      {\r\n        Header: 'Country',\r\n        accessor: 'Country',\r\n      },\r\n    ],\r\n    [data, selectedRows]\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data }, useSortBy);\r\n\r\n  const addData = () => {\r\n    // Navigate to add data page\r\n  };\r\n\r\n  const deleteData = () => {\r\n    // Handle deletion logic\r\n    //Swal.fire({ title: 'Deleted' });\r\n  };\r\n\r\n  const downloadTable = (format) => {\r\n    let dataToDownload;\r\n    let blob;\r\n\r\n    const headers = headerGroups[0].headers\r\n      .filter(column => column.Header !== null && typeof column.Header === 'string')\r\n      .map(column => column.Header);\r\n\r\n    if (format === 'json') {\r\n      dataToDownload = JSON.stringify(data, null, 2);\r\n      blob = new Blob([dataToDownload], { type: 'application/json' });\r\n    } else if (format === 'text') {\r\n      dataToDownload = [\r\n        headers.join(', '),\r\n        ...data.map(row => Object.values(row).join(', '))\r\n      ].join('\\n');\r\n      blob = new Blob([dataToDownload], { type: 'text/plain' });\r\n    } else if (format === 'xlsx') {\r\n      const filteredData = data.map(row => {\r\n        const newRow = {};\r\n        headers.forEach((header, index) => {\r\n          newRow[header] = Object.values(row)[index];\r\n        });\r\n        return newRow;\r\n      });\r\n\r\n      const worksheet = XLSX.utils.json_to_sheet(filteredData, { header: headers });\r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n\r\n      const binaryString = XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });\r\n\r\n      const buffer = new ArrayBuffer(binaryString.length);\r\n      const view = new Uint8Array(buffer);\r\n      for (let i = 0; i < binaryString.length; i++) {\r\n        view[i] = binaryString.charCodeAt(i) & 0xFF;\r\n      }\r\n\r\n      blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    }\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `table-data.${format}`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  };\r\n\r\n  const handleDownloadSelect = (format) => {\r\n    setSelectedFormat(format);\r\n    downloadTable(format);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"d-flex justify-content-center mb-3\">\r\n        <button onClick={() => setData(hardcodedData)} className=\"custom-btn\">\r\n          Fetch Data\r\n        </button>\r\n        <button onClick={deleteData} className=\"custom-btn3\">\r\n          Delete\r\n        </button>\r\n        <button onClick={addData} className=\"custom-btn\">\r\n          Add Data\r\n        </button>\r\n      </div>\r\n      <div className=\"container mt-4\">\r\n        <b>Download</b>\r\n        <Dropdown>\r\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n            {selectedFormat.toUpperCase() || 'Select Format'}\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('json')}>\r\n              JSON\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('text')}>\r\n              Text\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('xlsx')}>\r\n              Excel\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n      <div className=\"table-container\">\r\n        <table {...getTableProps()} className=\"table table-bordered table-dark\">\r\n          <thead className=\"thead-dark\">\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    className=\"text-center\"\r\n                  >\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' ðŸ”½'\r\n                          : ' ðŸ”¼'\r\n                        : ''}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => (\r\n                    <td\r\n                      {...cell.getCellProps()}\r\n                      className=\"text-center\"\r\n                    >\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* <DisplayData selectedData={selectedData} /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"names":["hardcodedData","Id","Name","Age","Country","_useState","useState","selectedRows","setSelectedRows","setSelectedData","_useState3","data","setData","_useState4","selectedFormat","setSelectedFormat","handleSelectAll","length","allIds","map","row","columns","useMemo","Header","React","createElement","onClick","className","accessor","Cell","_ref","type","checked","includes","original","onChange","rowId","prevSelected","updatedSelected","filter","id","concat","updatedData","item","handleCheckboxChange","disableSortBy","_useTable","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","handleDownloadSelect","format","dataToDownload","blob","headers","column","JSON","stringify","Blob","join","Object","values","filteredData","newRow","forEach","header","index","worksheet","XLSX","utils","json_to_sheet","workbook","book_new","book_append_sheet","binaryString","write","bookType","buffer","ArrayBuffer","view","Uint8Array","i","charCodeAt","url","window","URL","createObjectURL","a","document","href","download","body","appendChild","click","removeChild","downloadTable","Fragment","Dropdown","Toggle","variant","toUpperCase","Menu","Item","_extends","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps"],"mappings":"yrBAUA,IAAMA,EAAgB,CACpB,CAAEC,GAAI,EAAGC,KAAM,WAAYC,IAAK,GAAIC,QAAS,OAC7C,CAAEH,GAAI,EAAGC,KAAM,aAAcC,IAAK,GAAIC,QAAS,UAC/C,CAAEH,GAAI,EAAGC,KAAM,gBAAiBC,IAAK,GAAIC,QAAS,MAClD,CAAEH,GAAI,EAAGC,KAAM,YAAaC,IAAK,GAAIC,QAAS,6BAGlC,WACZ,IAAAC,EAAwCC,EAAAA,SAAS,IAA1CC,EAAYF,EAAA,GAAEG,EAAeH,EACpC,GAAqBI,EAAmBH,EAAAA,SAAS,OACjDI,EAAwBJ,WAASN,GAA1BW,EAAID,EAAEE,GAAAA,EAAOF,EAAA,GACpBG,EAA4CP,WAAS,QAA9CQ,EAAcD,EAAA,GAAEE,EAAiBF,KAiBlCG,EAAkB,WACtB,GAAIT,EAAaU,SAAWN,EAAKM,OAC/BT,EAAgB,IAChBC,EAAgB,QACX,CACL,IAAMS,EAASP,EAAKQ,IAAI,SAAAC,GAAO,OAAAA,EAAInB,EAAE,GACrCO,EAAgBU,GAChBT,EAAgBE,EAClB,CACF,EAEMU,EAAUC,EAAOA,QACrB,WAAA,MAAM,CACJ,CACEC,OAAQ,+BACNC,EAAA,QAAAC,cAAQC,SAAAA,CAAAA,QAASV,EAAiBW,UAAU,4BAC1CH,EAAAA,QAAAC,cAAA,IAAA,KAAG,UACI,EAEXG,SAAU,SACVC,KAAM,SAAFC,OAAKV,EAAGU,EAAHV,iBAAG,OACVI,EAAAA,QAAAC,uBACEM,KAAK,WACLC,QAASzB,EAAa0B,SAASb,EAAIc,SAASjC,IAC5CkC,SAAU,WAAF,OAvCW,SAACf,GAC5B,IAAMgB,EAAQhB,EAAIc,SAASjC,GAC3BO,EAAgB,SAAA6B,GACd,IACMC,EADaD,EAAaJ,SAASG,GAErCC,EAAaE,OAAO,SAAAC,GAAE,OAAIA,IAAOJ,CAAK,GAAC,GAAAK,OACnCJ,EAAcD,CAAAA,IAEhBM,EAAc/B,EAAK4B,OAAO,SAAAI,GAAQ,OAAAL,EAAgBL,SAASU,EAAK1C,GAAG,GAGzE,OAFAQ,EAAgBiC,GAETJ,CACT,EACF,CA0B0BM,CAAqBxB,EAAI,GACzC,EAEJyB,eAAe,GAEjB,CACEtB,OAAQ,WACRK,SAAU,MAEZ,CACEL,OAAQ,OACRK,SAAU,QAEZ,CACEL,OAAQ,MACRK,SAAU,OAEZ,CACEL,OAAQ,UACRK,SAAU,WAEb,EACD,CAACjB,EAAMJ,IAGTuC,EAMIC,EAAAA,SAAS,CAAE1B,QAAAA,EAASV,KAAAA,GAAQqC,aAL9BC,EAAaH,EAAbG,cACAC,EAAiBJ,EAAjBI,kBACAC,EAAYL,EAAZK,aACAC,EAAIN,EAAJM,KACAC,EAAUP,EAAVO,WA8DIC,EAAuB,SAACC,GAC5BxC,EAAkBwC,GAnDE,SAACA,GACrB,IAAIC,EACAC,EAEEC,EAAUP,EAAa,GAAGO,QAC7BnB,OAAO,SAAAoB,UAA4B,OAAlBA,EAAOpC,QAA4C,iBAAlBoC,EAAOpC,MAAmB,GAC5EJ,IAAI,SAAAwC,GAAM,OAAIA,EAAOpC,MAAM,GAE9B,GAAe,SAAXgC,EACFC,EAAiBI,KAAKC,UAAUlD,EAAM,KAAM,GAC5C8C,EAAO,IAAIK,KAAK,CAACN,GAAiB,CAAEzB,KAAM,0BACrC,GAAe,SAAXwB,EACTC,EAAiB,CACfE,EAAQK,KAAK,OAAKtB,OACf9B,EAAKQ,IAAI,SAAAC,GAAO,OAAA4C,OAAOC,OAAO7C,GAAK2C,KAAK,KAAK,IAChDA,KAAK,MACPN,EAAO,IAAIK,KAAK,CAACN,GAAiB,CAAEzB,KAAM,oBACjCwB,GAAW,SAAXA,EAAmB,CAC5B,IAAMW,EAAevD,EAAKQ,IAAI,SAAAC,GAC5B,IAAM+C,EAAS,CAAE,EAIjB,OAHAT,EAAQU,QAAQ,SAACC,EAAQC,GACvBH,EAAOE,GAAUL,OAAOC,OAAO7C,GAAKkD,EACtC,GACOH,CACT,GAEMI,EAAYC,EAAKC,MAAMC,cAAcR,EAAc,CAAEG,OAAQX,IAC7DiB,EAAWH,EAAKC,MAAMG,WAC5BJ,EAAKC,MAAMI,kBAAkBF,EAAUJ,EAAW,UAMlD,IAJA,IAAMO,EAAeN,EAAKO,MAAMJ,EAAU,CAAEK,SAAU,OAAQjD,KAAM,WAE9DkD,EAAS,IAAIC,YAAYJ,EAAa7D,QACtCkE,EAAO,IAAIC,WAAWH,GACnBI,EAAI,EAAGA,EAAIP,EAAa7D,OAAQoE,IACvCF,EAAKE,GAAkC,IAA7BP,EAAaQ,WAAWD,GAGpC5B,EAAO,IAAIK,KAAK,CAACmB,GAAS,CAAElD,KAAM,qEACpC,CAEA,IAAMwD,EAAMC,OAAOC,IAAIC,gBAAgBjC,GACjCkC,EAAIC,SAASnE,cAAc,KACjCkE,EAAEE,KAAON,EACTI,EAAEG,SAAQ,cAAiBvC,EAC3BqC,SAASG,KAAKC,YAAYL,GAC1BA,EAAEM,QACFL,SAASG,KAAKG,YAAYP,EAC5B,CAIEQ,CAAc5C,EAChB,eAEA,OACE/B,EAAA,QAAAC,cAAC2E,EAAAA,2BACC5E,UAAAC,cAAA,MAAA,CAAKE,UAAU,mDACbH,EAAA,QAAAC,cAAQC,SAAAA,CAAAA,QAAS,kBAAMd,EAAQZ,EAAc,EAAE2B,UAAU,cAAa,2BAGtEH,EAAA,QAAAC,cAAA,SAAA,CAAQC,QAlEK,WAAM,EAkEUC,UAAU,eAAc,uBAGrDH,EAAA,QAAAC,cAAQC,SAAAA,CAAAA,QAzEE,aAyEgBC,UAAU,cAAa,0BAInDH,EAAA,QAAAC,cAAKE,MAAAA,CAAAA,UAAU,+BACbH,EAAA,QAAAC,uBAAG,yBACHD,EAAA,QAAAC,cAAC4E,WACC7E,kBAAAA,EAAA,QAAAC,cAAC4E,EAAAA,SAASC,OAAOC,CAAAA,QAAQ,UAAU/D,GAAG,kBACnC1B,EAAe0F,eAAiB,8BAGnChF,EAAAA,QAAAC,cAAC4E,EAAQA,SAACI,KACRjF,kBAAAA,EAAA,QAAAC,cAAC4E,WAASK,KAAKhF,CAAAA,QAAS,WAAF,OAAQ4B,EAAqB,OAAO,GAAE,qBAG5D9B,EAAAA,QAAAC,cAAC4E,WAASK,KAAKhF,CAAAA,QAAS,kBAAM4B,EAAqB,OAAO,GAAE,qBAG5D9B,UAAAC,cAAC4E,EAAQA,SAACK,KAAKhF,CAAAA,QAAS,kBAAM4B,EAAqB,OAAO,GAAE,yBAMlE9B,EAAAA,QAAAC,cAAKE,MAAAA,CAAAA,UAAU,gCACbH,UAAAC,sBAAAkF,EAAA,CAAA,EAAW1D,IAAiBtB,CAAAA,UAAU,iDACpCH,UAAAC,cAAA,QAAA,CAAOE,UAAU,cACdwB,EAAahC,IAAI,SAAAyF,gBAAW,OAC3BpF,EAAA,QAAAC,mBAAQmF,EAAYC,sBACjBD,EAAYlD,QAAQvC,IAAI,SAAAwC,gBACvBnC,OAAAA,EAAA,QAAAC,mBAAAkF,EAAA,CAAA,EACMhD,EAAOmD,eAAenD,EAAOoD,wBAAuB,CACxDpF,UAAU,gBAETgC,EAAOqD,OAAO,uBACfxF,EAAAA,QAAAC,0BACGkC,EAAOsD,SACJtD,EAAOuD,aACL,MACA,MACF,IAEH,GAEJ,iBAGT1F,EAAA,QAAAC,cAAA,QAAWyB,IACRE,EAAKjC,IAAI,SAAAC,GAER,OADAiC,EAAWjC,gBAETI,EAAAA,QAAAC,cAAA,KAAQL,EAAI+F,cACT/F,EAAIgG,MAAMjG,IAAI,SAAAkG,uBACb7F,EAAA,QAAAC,cAAAkF,KAAAA,EACMU,CAAAA,EAAAA,EAAKC,eACT3F,CAAAA,UAAU,gBAET0F,EAAKL,OAAO,QACV,GAIb,MAOZ"}