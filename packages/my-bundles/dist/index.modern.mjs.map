{"version":3,"file":"index.modern.mjs","sources":["../src/Table.jsx"],"sourcesContent":["import React, { Fragment, useMemo, useState } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\n//import DisplayData from './DisplayData';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Table.css';\r\n//import Swal from 'sweetalert2';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Hardcoded data\r\nconst hardcodedData = [\r\n  { Id: 1, Name: 'John Doe', Age: 28, Country: 'USA' },\r\n  { Id: 2, Name: 'Jane Smith', Age: 34, Country: 'Canada' },\r\n  { Id: 3, Name: 'Alice Johnson', Age: 45, Country: 'UK' },\r\n  { Id: 4, Name: 'Bob Brown', Age: 23, Country: 'Australia' },\r\n];\r\n\r\nconst Table = () => {\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedData, setSelectedData] = useState([]);\r\n  const [data, setData] = useState(hardcodedData);\r\n  const [selectedFormat, setSelectedFormat] = useState('json');\r\n\r\n  const handleCheckboxChange = (row) => {\r\n    const rowId = row.original.Id;\r\n    setSelectedRows(prevSelected => {\r\n      const isSelected = prevSelected.includes(rowId);\r\n      const updatedSelected = isSelected\r\n        ? prevSelected.filter(id => id !== rowId)\r\n        : [...prevSelected, rowId];\r\n\r\n      const updatedData = data.filter(item => updatedSelected.includes(item.Id));\r\n      setSelectedData(updatedData);\r\n\r\n      return updatedSelected;\r\n    });\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedRows.length === data.length) {\r\n      setSelectedRows([]);\r\n      setSelectedData([]);\r\n    } else {\r\n      const allIds = data.map(row => row.Id);\r\n      setSelectedRows(allIds);\r\n      setSelectedData(data);\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: () => (\r\n          <button onClick={handleSelectAll} className=\"custom-btn2\">\r\n            <b>Select</b>\r\n          </button>\r\n        ),\r\n        accessor: 'select',\r\n        Cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedRows.includes(row.original.Id)}\r\n            onChange={() => handleCheckboxChange(row)}\r\n          />\r\n        ),\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: 'Identity',\r\n        accessor: 'Id',\r\n      },\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'Name',\r\n      },\r\n      {\r\n        Header: 'Age',\r\n        accessor: 'Age',\r\n      },\r\n      {\r\n        Header: 'Country',\r\n        accessor: 'Country',\r\n      },\r\n    ],\r\n    [data, selectedRows]\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data }, useSortBy);\r\n\r\n  const addData = () => {\r\n    // Navigate to add data page\r\n  };\r\n\r\n  const deleteData = () => {\r\n    // Handle deletion logic\r\n    //Swal.fire({ title: 'Deleted' });\r\n  };\r\n\r\n  const downloadTable = (format) => {\r\n    let dataToDownload;\r\n    let blob;\r\n\r\n    const headers = headerGroups[0].headers\r\n      .filter(column => column.Header !== null && typeof column.Header === 'string')\r\n      .map(column => column.Header);\r\n\r\n    if (format === 'json') {\r\n      dataToDownload = JSON.stringify(data, null, 2);\r\n      blob = new Blob([dataToDownload], { type: 'application/json' });\r\n    } else if (format === 'text') {\r\n      dataToDownload = [\r\n        headers.join(', '),\r\n        ...data.map(row => Object.values(row).join(', '))\r\n      ].join('\\n');\r\n      blob = new Blob([dataToDownload], { type: 'text/plain' });\r\n    } else if (format === 'xlsx') {\r\n      const filteredData = data.map(row => {\r\n        const newRow = {};\r\n        headers.forEach((header, index) => {\r\n          newRow[header] = Object.values(row)[index];\r\n        });\r\n        return newRow;\r\n      });\r\n\r\n      const worksheet = XLSX.utils.json_to_sheet(filteredData, { header: headers });\r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n\r\n      const binaryString = XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });\r\n\r\n      const buffer = new ArrayBuffer(binaryString.length);\r\n      const view = new Uint8Array(buffer);\r\n      for (let i = 0; i < binaryString.length; i++) {\r\n        view[i] = binaryString.charCodeAt(i) & 0xFF;\r\n      }\r\n\r\n      blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    }\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `table-data.${format}`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  };\r\n\r\n  const handleDownloadSelect = (format) => {\r\n    setSelectedFormat(format);\r\n    downloadTable(format);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"d-flex justify-content-center mb-3\">\r\n        <button onClick={() => setData(hardcodedData)} className=\"custom-btn\">\r\n          Fetch Data\r\n        </button>\r\n        <button onClick={deleteData} className=\"custom-btn3\">\r\n          Delete\r\n        </button>\r\n        <button onClick={addData} className=\"custom-btn\">\r\n          Add Data\r\n        </button>\r\n      </div>\r\n      <div className=\"container mt-4\">\r\n        <b>Download</b>\r\n        <Dropdown>\r\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n            {selectedFormat.toUpperCase() || 'Select Format'}\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('json')}>\r\n              JSON\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('text')}>\r\n              Text\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleDownloadSelect('xlsx')}>\r\n              Excel\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n      <div className=\"table-container\">\r\n        <table {...getTableProps()} className=\"table table-bordered table-dark\">\r\n          <thead className=\"thead-dark\">\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    className=\"text-center\"\r\n                  >\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' ðŸ”½'\r\n                          : ' ðŸ”¼'\r\n                        : ''}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => (\r\n                    <td\r\n                      {...cell.getCellProps()}\r\n                      className=\"text-center\"\r\n                    >\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* <DisplayData selectedData={selectedData} /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"names":["hardcodedData","Id","Name","Age","Country","Table","selectedRows","setSelectedRows","useState","selectedData","setSelectedData","data","setData","selectedFormat","setSelectedFormat","handleSelectAll","length","allIds","map","row","columns","useMemo","Header","React","createElement","onClick","className","accessor","Cell","type","checked","includes","original","onChange","rowId","prevSelected","updatedSelected","filter","id","updatedData","item","handleCheckboxChange","disableSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","useSortBy","handleDownloadSelect","format","dataToDownload","blob","headers","column","JSON","stringify","Blob","join","Object","values","filteredData","newRow","forEach","header","index","worksheet","XLSX","utils","json_to_sheet","workbook","book_new","book_append_sheet","binaryString","write","bookType","buffer","ArrayBuffer","view","Uint8Array","i","charCodeAt","url","window","URL","createObjectURL","a","document","href","download","body","appendChild","click","removeChild","downloadTable","Fragment","deleteData","addData","Dropdown","Toggle","variant","toUpperCase","Menu","Item","_extends","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps"],"mappings":"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"}